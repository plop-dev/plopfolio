---
import Layout from '@/layouts/DefaultLayout.astro';
import { ButtonComponent } from '@/components/ui/ButtonComponent';

import { Image } from 'astro:assets';
import desktopImage from '@/images/desktop.png';
import desktopImageGlow from '@/images/desktop-glow.png';
import desktopAnim from '@/images/desktop-anim.webm';

import line from '@/images/line.svg?raw';
import SkillCard from '@/components/SkillCard.astro';

import { ProjectCarousel } from '@/components/ProjectCarousel';
import ProjectItem from '@/components/ProjectItem.astro';

function getYear(dateString: string) {
	let today = new Date();
	let birthDate = new Date(dateString);
	let age = today.getFullYear() - birthDate.getFullYear();
	let m = today.getMonth() - birthDate.getMonth();
	if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
		age--;
	}
	return age;
}
---

<Layout title='Home'>
	<main>
		<div class='front-page'>
			<div class='title'>
				<h1>Hey there</h1>
				<h1>
					I'm <span class='linear-gradient-text'>maxime<span class='linear-gradient-text glow'>maxime</span></span>
				</h1>

				<p>I make websites, and uh that's it :)</p>
				<ButtonComponent variant='default' link='/contact' text='Contact Me' />
			</div>
			<!-- <p>Just a {getYear('2010, 05, 28')} year old guy making websites just because I have nothing better to do.</p> -->

			<div class='line'>
				<div class='line-ctn'>
					<Fragment set:html={line} />
					<div class='line-ctn glow'><Fragment set:html={line} /></div>
				</div>
			</div>
		</div>

		<div class='about'>
			<div class='content'>
				<h3 class='glow-underline'>Based in the UK</h3>
				<p>
					Just a quick intro; I've been programming for {getYear('2021, 07, 13')} years in multiple languages with different frameworks (mostly AstroJS).
					I'm quite busy with school at the moment, but don't hesitate to contact me.
				</p>
				<p>
					I'm a self-taught developer (proudly a course and bootcamp free developer), but I've been learning a lot since I started. I'm currently
					learning React, NextJS (soon), and TailwindCSS. Making production-quality websites is a priority for me, like thinking about accessibility
					and responsiveness as well as performance across devices/browsers.
				</p>
			</div>
			<div class='image'>
				<!-- <Image src={desktopImage} alt='' /> -->
				<Image id='desktop-image-glow' src={desktopImageGlow} alt='' />
				<video loop muted>
					<source src={desktopAnim} type='video/webm' />
				</video>
			</div>
		</div>

		<div class='skills'>
			<h3 class='glow-underline'>Skills</h3>
			<p>Here are some of my skills that I've worked on throughout some of my projects:</p>

			<SkillCard skill='JavaScript' iconName='js' progress='85%' />
			<SkillCard skill='Python' iconName='python' progress='75%' />
			<SkillCard skill='CSS' iconName='css' progress='75%' />
			<SkillCard skill='C#/.NET' iconName='cs' progress='35%' />
		</div>

		<div class='projects'>
			<h3 class='glow-underline'>Projects</h3>
			<p>
				I've worked on various different projects throughout the past {getYear('2021, 07, 13')} years. Here are some of my recent/most challenging projects
				I've done:
			</p>

			<div class='project-ctn'>
				<ProjectItem
					title='apple-but-better'
					description="This is probably one of my best websites in terms of design and animation. It was for a computer science project at school I had to make. I really liked Apple's website for their iPhone 15 Pro so I decided to replicate it but add my own twist; so here it is."
					media={[
						{
							src: '/images/projects/apple-but-better/front.png',
							alt: '',
							type: 'image',
						},
						{
							src: '/images/projects/apple-but-better/carousel.png',
							alt: '',
							type: 'image',
						},
						{
							src: '/images/projects/apple-but-better/camera.png',
							alt: '',
							type: 'image',
						},
					]}
					url='https://apple-but-better.vercel.app'
					,
				/>
				<ProjectItem
					title='plopfolio'
					description='\n(This website!) Proudly made using AstroJS and shadcn/ui to make a portfolio website to show some of my skills, projects, and just things about me. Check the website out on [GitHub](https://github.com/plop-dev/plopfolio) :)'
					media={[
						{
							src: '/images/projects/plopfolio/home.png',
							alt: '',
							type: 'image',
						},
						{
							src: '/images/projects/plopfolio/about.png',
							alt: '',
							type: 'image',
						},
						{
							src: '/images/projects/plopfolio/skills.png',
							alt: '',
							type: 'image',
						},
					]}
					url='#top'
					newTab={false}
					,
				/>
			</div>
		</div>
	</main>
</Layout>

<script>
	import anime from 'animejs/lib/anime.es.js';

	const createBlinkingAnimation = (
		targets: HTMLElement | NodeList | string,
		optionsParam: {
			opacityMin?: number;
			opacityMax?: number;
			speed?: 'quick' | 'slow';
			variant?: 'normal' | 'off' | 'breathing';
			loop?: boolean;
			autoplay?: boolean;
		} = {},
	) => {
		const defaultOptions = {
			opacityMin: 0.35,
			opacityMax: 1,
			speed: 'slow',
			variant: 'normal',
			loop: false,
			autoplay: false,
		};

		const options = { ...defaultOptions, ...optionsParam };

		switch (options.variant) {
			case 'normal':
				return anime
					.timeline(options)
					.add({
						duration: options?.speed === 'quick' ? 0 : 600,
					})
					.add({
						targets,
						opacity: [options?.opacityMin, options?.opacityMax, options?.opacityMin, options?.opacityMax],
						easing: 'linear',
						duration: 260,
					})
					.add({
						duration: options?.speed === 'quick' ? 300 : 1000,
					});

			case 'breathing':
				return anime({
					targets,
					opacity: [options?.opacityMin, options?.opacityMax, options?.opacityMin],
					easing: 'linear',
					duration: options?.speed === 'quick' ? 2500 : 4000,
					loop: true,
					direction: 'alternate',
					options,
				});

			case 'off':
				return anime
					.timeline(options)
					.add({
						targets,
						opacity: [0, options?.opacityMax, 0, options?.opacityMax, 0],
						easing: 'linear',
						duration: 260,
					})
					.add({
						duration: 2300,
					})
					.add({
						targets,
						opacity: [0.6, 0.2, 1],
						duration: 800,
						easing: 'easeInOutQuad',
					});

			default:
				return anime
					.timeline(options)
					.add({
						duration: options?.speed === 'quick' ? 0 : 600,
					})
					.add({
						targets,
						opacity: [options?.opacityMin, options?.opacityMax, options?.opacityMin, options?.opacityMax],
						easing: 'linear',
						duration: 260,
					})
					.add({
						duration: options?.speed === 'quick' ? 300 : 1000,
					});
		}
	};

	document.addEventListener('astro:page-load', () => {
		anime({
			targets: '.line path',
			strokeDashoffset: [anime.setDashoffset, 0],
			easing: 'easeInQuad',
			duration: 1000,
			autoplay: true,
		}).finished.then(() => {
			const blinkingLine = createBlinkingAnimation('.line > *', {
				autoplay: true,
				speed: 'slow',
				loop: true,
				variant: 'normal',
			});
			blinkingLine.play();
		});

		//#region title hover animation
		const blinkingText = createBlinkingAnimation('.title h1 span.linear-gradient-text:not(span.glow)', {
			autoplay: false,
			loop: false,
			variant: 'off',
			speed: 'quick',
		});

		document.querySelector<HTMLElement>('.title h1 span.linear-gradient-text')!.addEventListener('mouseenter', event => {
			console.log(blinkingText);
			blinkingText.restart();
		});
		//#endregion

		//#region desktop image glow animation
		const desktopImageGlowBlink = createBlinkingAnimation('#desktop-image-glow', {
			autoplay: true,
			variant: 'breathing',
			opacityMin: 0.4,
			opacityMax: 0.7,
		});
		desktopImageGlowBlink.play();
		//#endregion

		//#region desktop animation play on viewport
		const desktopAnimVideo = document.querySelector<HTMLVideoElement>('video');
		const observer = new IntersectionObserver(
			entries => {
				entries.forEach(entry => {
					if (entry.isIntersecting) {
						desktopAnimVideo?.play();
					} else {
						desktopAnimVideo?.pause();
					}
				});
			},
			{
				threshold: 0.5,
			},
		);

		if (desktopAnimVideo) {
			observer.observe(desktopAnimVideo);
		}
		//#endregion
	});
</script>

<style lang='scss'>
	.front-page {
		height: 100dvh;
		width: 100%;

		display: flex;
		flex-direction: column;
		gap: 15%;

		.title {
			position: relative;
			top: 5%;

			h1 {
				&:not(:has(span)) {
					position: relative;

					&::after {
						content: 'ðŸ‘‹';
						position: relative;
						animation: wave 1.5s infinite ease-in-out;
						transform-origin: bottom right;
					}

					@keyframes wave {
						0% {
							transform: rotateZ(0deg);
						}

						50% {
							transform: rotateZ(20deg);
						}

						100% {
							transform: rotateZ(0deg);
						}
					}
				}
				& .linear-gradient-text {
					cursor: default;
					position: relative;
					z-index: 10;

					span.glow {
						z-index: -1;
						position: absolute;
						left: 0;
						opacity: 0.7;
						filter: blur(10px);
					}
				}
			}

			p {
				color: var(--_text-faint);
				margin: 32px 0;
				width: 100%;
			}
		}

		.line {
			position: absolute;
			top: 50vh;
			left: 200px;
			width: 1750px;
			z-index: 1;

			.line-ctn:not(.glow) {
				z-index: -1;
				position: relative;

				.line-ctn.glow {
					position: absolute;
					top: 0;
					left: 0;
					opacity: 0.5;
					filter: blur(10px);
				}
			}
		}
	}

	.about {
		display: flex;
		align-items: center;
		column-gap: 15%;

		.content {
			display: flex;
			flex-direction: column;
			gap: 1rem;
			max-width: 35vw;
			height: auto;
		}

		.image {
			width: auto;
			height: auto;
			position: relative;

			video {
				filter: contrast(1.4) saturate(1.2);
			}

			#desktop-image-glow {
				position: absolute;
				top: 0;
				left: 0;
				z-index: -1;

				& ~ :not(&) {
					position: relative;
					z-index: 1;
				}
			}
		}
	}

	.skills {
		display: flex;
		flex-direction: column;
		gap: 1rem;
		margin-top: 25vh;

		p {
			width: 40vw;
		}
	}

	.projects {
		display: flex;
		flex-direction: column;
		gap: 1rem;
		margin-top: 25vh;

		p {
			width: 40vw;
		}

		.project-ctn {
			display: flex;
			flex-direction: column;
			row-gap: 4rem;
			margin-top: 4rem;
			width: 85%;
		}
	}
</style>
