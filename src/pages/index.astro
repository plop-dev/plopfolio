---
import Layout from '@/layouts/DefaultLayout.astro';
import { Image } from 'astro:assets';
import line from '@/images/line.svg?raw';
import { ButtonComponent } from '@/components/ui/ButtonComponent';

function getYear(dateString: string) {
	let today = new Date();
	let birthDate = new Date(dateString);
	let age = today.getFullYear() - birthDate.getFullYear();
	let m = today.getMonth() - birthDate.getMonth();
	if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
		age--;
	}
	return age;
}
---

<Layout title='Maxime C'>
	<main>
		<div class='content'>
			<div class='front-page'>
				<div class='title'>
					<h1>Hey there</h1>
					<h1>
						<span class='mr-[1ch]'>I'm</span>
						<span class='linear-gradient-text'
							><div>m</div><div>a</div><div>x</div><div>i</div><div>m</div><div>e</div>
							<span class='linear-gradient-text glow'><div>m</div><div>a</div><div>x</div><div>i</div><div>m</div><div>e</div></span></span
						>
					</h1>
					<!-- <p>Just a {getAge('2010, 05, 28')} year old guy making websites just because I have nothing better to do.</p> -->
					<p>I make websites, and uh that's it :)</p>
					<ButtonComponent variant='default' link='/contact' text='Contact Me' />
				</div>

				<div class='line'>
					<div class='line-ctn'>
						<Fragment set:html={line} />
						<div class='line-ctn glow'><Fragment set:html={line} /></div>
					</div>
				</div>
			</div>

			<div class='who-i-am'>
				<h3>Based in the UK</h3>
				<p>
					Just a quick intro; I've been programming for {getYear('2021, 07, 13')} years programming in multiple languages with different frameworks (mostly
					AstroJS). I'm quite busy with school at the moment, but don't hesitate to contact me.
				</p>
			</div>
		</div>
	</main>
</Layout>

<script>
	import anime from 'animejs/lib/anime.es.js';
	import { createAnimationScope } from 'astro:transitions';

	const createBlinkingAnimation = (
		targets: HTMLElement | NodeList | string,
		variant: 'quick' | 'slow' = 'slow',
		loop: boolean = true,
		autoplay: boolean = true,
	) => {
		return anime
			.timeline({ loop, autoplay })
			.add({
				duration: variant === 'quick' ? 0 : 600,
			})
			.add({
				targets: targets,
				opacity: [0.35, 1, 0.35, 1],
				easing: 'linear',
				duration: 260,
			})
			.add({
				duration: variant === 'quick' ? 300 : 1000,
			});
	};

	document.addEventListener('astro:page-load', () => {
		anime({
			targets: '.line path',
			strokeDashoffset: [anime.setDashoffset, 0],
			easing: 'easeInQuad',
			duration: 1000,
			autoplay: true,
		}).finished.then(() => {
			const blinkingLine = createBlinkingAnimation('.line > *');
			blinkingLine.play();
		});

		document.querySelectorAll<HTMLElement>('.title h1 .linear-gradient-text div').forEach(ch => {
			const blinkingText = createBlinkingAnimation(ch);

			ch.addEventListener('mouseenter', event => {
				blinkingText.restart();
			});

			ch.addEventListener('mouseleave', event => {
				blinkingText.pause();
				ch.style.opacity = '1';
			});
		});
	});
</script>

<style lang='scss'>
	.content {
		min-width: 100vw;
		max-width: 100vw;
		height: auto;
		position: relative;
		display: flex;
		flex-direction: column;
		gap: 15%;

		.front-page {
			height: 100dvh;
			width: 100%;

			.line {
				position: absolute;
				bottom: 40%;
				left: 200px;
				width: 1750px;

				.line-ctn:not(.glow) {
					z-index: -1;
					position: relative;

					.line-ctn.glow {
						position: absolute;
						top: 0;
						left: 0;
						opacity: 0.5;
						filter: blur(10px);
					}
				}
			}

			.title {
				position: relative;
				top: 5%;

				h1 {
					display: flex;

					&:not(:has(span)) {
						position: relative;

						&::after {
							content: 'ðŸ‘‹';
						}
					}
					& .linear-gradient-text {
						cursor: default;
						position: relative;
						z-index: 100;
						display: flex;

						span.glow {
							display: flex;
							z-index: -1;
							position: absolute;
							left: 0;
							opacity: 0.4;
							filter: blur(10px);
						}
					}
				}

				p {
					color: var(--_text-faint);
					margin: 32px 0;
					width: 100%;
				}
			}
		}

		.who-i-am {
			display: flex;
			flex-direction: column;
			gap: 8px;
			width: 40vw;
			height: 20vh;
			position: relative;
			top: 40%;
			// opacity: 0;
			// transform: translateY(80px) rotateX(35deg);
		}
	}
</style>
