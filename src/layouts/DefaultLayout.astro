---
import SpeedInsights from '@vercel/speed-insights/astro';

import { ViewTransitions } from 'astro:transitions';
import Navbar from '@/components/Navbar.astro';

import 'lenis/dist/lenis.css';
import '@/styles/shadcnui.css';
import '@/styles/global.scss';

import grid from '@/images/grid.svg';
import { Image } from 'astro:assets';

interface Props {
	title: string;
	viewTransitions?: boolean;
}

const { title, viewTransitions } = Astro.props;
---

<!doctype html>
<html lang='en'>
	<head>
		<meta charset='UTF-8' />
		<meta name='description' content='My portfolio, enjoy!' />
		<meta name='viewport' content='width=device-width' />
		<link rel='icon' type='image/svg+xml' href='/icons/plop-rounded.png' />
		<meta name='generator' content={Astro.generator} />
		<title>{title} | Maxime C</title>
		<ViewTransitions />
	</head>
	<body>
		<!-- <Image src={grid} alt='' id='bg' /> -->
		<div id='bg'></div>

		<SpeedInsights />
		<Navbar transition:persist />

		<slot />
		<script is:inline>
			function checkTheme() {
				const getThemePreference = () => {
					if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
						return localStorage.getItem('theme');
					}
					return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
				};
				const isDark = getThemePreference() === 'dark';
				document.documentElement.classList[isDark ? 'add' : 'remove']('dark');

				if (typeof localStorage !== 'undefined') {
					const observer = new MutationObserver(() => {
						const isDark = document.documentElement.classList.contains('dark');
						localStorage.setItem('theme', isDark ? 'dark' : 'light');
					});
					observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
				}
			}

			document.addEventListener('astro:after-swap', checkTheme);
			document.addEventListener('DOMContentLoaded', checkTheme);
		</script>
	</body>
</html>

<script>
	import Lenis from 'lenis';
	import { gsap } from 'gsap';
	import { ScrollTrigger } from 'gsap/all';

	const lenis = new Lenis({
		autoRaf: true,
	});

	lenis.on('scroll', ScrollTrigger.update);
	gsap.ticker.add(time => {
		lenis.raf(time * 1000); // Convert time from seconds to milliseconds
	});
	gsap.ticker.lagSmoothing(0);

	const bg = document.getElementById('bg');

	window.addEventListener('mousemove', event => {
		const xPos = event.clientX / innerWidth - 0.5;
		const yPos = event.clientY / innerHeight - 0.5;

		gsap.to(bg, {
			'--glowX': xPos * 1,
			'--glowY': -yPos * 1,
			ease: 'power4.out',
		});
	});
</script>
